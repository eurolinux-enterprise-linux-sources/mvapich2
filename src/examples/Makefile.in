# This Makefile.in created by simplemake.  Do not edit

# @configure_input@

# --------------------------------------------------------------------------
all: all-redirect

SHELL           = @SHELL@
master_top_srcdir  = @master_top_srcdir@
abs_builddir    = @abs_builddir@
srcdir          = @srcdir@
abs_srcdir      = @abs_srcdir@
top_srcdir      = @top_srcdir@
MAKE            = @MAKE@
MPILIBNAME      = @MPILIBNAME@
PMPILIBNAME     = @PMPILIBNAME@

C_COMPILE       = $(CC) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)
C_LINK         = $(CC)
CC_SHL          = @CC_SHL@
C_COMPILE_SHL   = $(CC_SHL) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)

VPATH = .:@srcdir@
MPICHDIR=..
CC       = $(MPICHDIR)/bin/mpicc
CFLAGS   =
CXXFLAGS =
FFLAGS   =
F90FLAGS =
LDFLAGS  =
CPPFLAGS = 
DEFS     = 
INCLUDES = -I../src/include -I${top_srcdir}/src/include
LIBS   =

EXTRA_PROGRAMS = pmandel pmandel_spawn pmandel_service pmandel_spaserv 	         pmandel_fence hellow icpi parent child srtest srvec sr 		 spawn_merge_parent spawn_merge_child1 spawn_merge_child2

.SUFFIXES:
.SUFFIXES: .o .lo .c .txt 
.c.o:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -c $< ; \
	fi
	@$(C_COMPILE) -c $<
.c.lo:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE_SHL) -c $< -o _s$*.o ; \
	echo mv -f _s$*.o $*.lo ; \
	fi
	@$(C_COMPILE_SHL) -c $< -o _s$*.o
	@mv -f _s$*.o $*.lo
.c.txt:
	$(CPP) $(INCLUDES) $(CPPFLAGS) $< >$*.txt
.c:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS) ; \
	fi
	@$(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS)

# --------------------------------------------------------------------------
${srcdir}/Makefile.in: ${srcdir}/Makefile.sm
	( cd ${srcdir} && ${master_top_srcdir}/maint/simplemake \
	-rootdir=../ \
	-configdir=. \
	-common=${master_top_srcdir}/maint/makedefs \
	-docnamedefs=${master_top_srcdir}/maint/docnotes \
	"-autoconf=-I ROOTDIR/confdb" \
	-libdir='$${MPILIBNAME}=ROOTDIR/lib' \
	-smroot=${master_top_srcdir}/maint \
	-distcleanfiles="Makefile mpich2info.h mpichtimer.h mpi.h" \
	-smvar_doc_attop=0 \
		Makefile.sm )
Makefile: ${srcdir}/Makefile.in
	-cd ../ && \
	if [ -x config.status ] ; then CONFIG_FILES=examples/Makefile CONFIG_HEADERS= ${SHELL} ./config.status ; fi
# --------------------------------------------------------------------------
apply: 
	$(ACTION) $(ACTION_INPUT)
clean: 
	-@rm -f *.o ${srcdir}/*.o parent hellow pmandel_spawn pmandel icpi child spawn_merge_child2 cpi pmandel_fence spawn_merge_parent spawn_merge_child1 pmandel_spaserv pmandel_service srtest
	-@rm -f parent.exe hellow.exe pmandel_spawn.exe pmandel.exe icpi.exe child.exe spawn_merge_child2.exe cpi.exe pmandel_fence.exe spawn_merge_parent.exe spawn_merge_child1.exe pmandel_spaserv.exe pmandel_service.exe srtest.exe
	-@rm -f core core.[0-9]*
	-@rm -f *.lo ${srcdir}/*.lo
	-@rm -f ${srcdir}/*.bb ${srcdir}/*.bbg ${srcdir}/*.da
	-@rm -f ${srcdir}/*.gcda ${srcdir}/*.gcno
	-@rm -f *.gcov *.bb *.bbg *.da *.gcda *.gcno
	-@rm -f *.irlog*
distclean:  clean distclean-xxx remove-makefile
distclean-xxx:
	-@rm -f Makefile
	-@rm -rf autom4te*.cache
	-@rm -rf $(DEPS_DIR)
	-@rm -f TAGS
maintainer-clean: clean distclean-xxx remove-genmakefiles
remove-makefile:
	rm -f Makefile
remove-genmakefiles:
	rm -f  Makefile.in Makefile
all-redirect: cpi

coverage: 
parent: parent.o   ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o parent parent.o  ${LIBS}
hellow: hellow.o   ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o hellow hellow.o  ${LIBS}
pmandel_spawn: pmandel_spawn.o  \
	 ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o pmandel_spawn pmandel_spawn.o  -lm \
	${LIBS} 
pmandel: pmandel.o   ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o pmandel pmandel.o  -lm ${LIBS}
icpi: icpi.o   ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o icpi icpi.o  -lm ${LIBS}
child: child.o   ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o child child.o  ${LIBS}
spawn_merge_child2: spawn_merge_child2.o  \
	 ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o spawn_merge_child2 \
	spawn_merge_child2.o  ${LIBS} 
cpi: cpi.o   ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o cpi cpi.o  -lm ${LIBS}
pmandel_fence: pmandel_fence.o  \
	 ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o pmandel_fence pmandel_fence.o  -lm \
	${LIBS} 
spawn_merge_parent: spawn_merge_parent.o  \
	 ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o spawn_merge_parent \
	spawn_merge_parent.o  ${LIBS} 
spawn_merge_child1: spawn_merge_child1.o  \
	 ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o spawn_merge_child1 \
	spawn_merge_child1.o  ${LIBS} 
pmandel_spaserv: pmandel_spaserv.o  \
	 ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o pmandel_spaserv pmandel_spaserv.o  \
	-lm ${LIBS} 
pmandel_service: pmandel_service.o  \
	 ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o pmandel_service pmandel_service.o  \
	-lm ${LIBS} 
srtest: srtest.o   ../lib/lib${MPILIBNAME}.a ../src/openpa/src/libopa.a
	$(C_LINK) $(CFLAGS) $(LDFLAGS) -o srtest srtest.o  ${LIBS}
# --------------------------------------------------------------------------
htmldoc:
mandoc:
latexdoc:
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# Dummy target
dependencies:

# --------------------------------------------------------------------------
SOURCES         =  hellow.c srtest.c child.c parent.c cpi.c icpi.c pmandel.c \
	pmandel_spawn.c pmandel_service.c pmandel_spaserv.c pmandel_fence.c \
	spawn_merge_parent.c spawn_merge_child1.c spawn_merge_child2.c 
HEADERFILES     = $(HEADERS)
SOURCEFILES     = $(SOURCES)
# --------------------------------------------------------------------------
#OTHER_DIRS = f77 f90 cxx
# We want to replace the compilation and linking rule used by simplement

# pmandel requires a separate set of socket calls (its a long story)
# and may not build on most platforms

# LIBS includes -lmpich and other libraries (e.g., -lpmpich if
# weak symbols are not supported)

# Use make all-programs to test building all example programs
all-programs: cpi $(EXTRA_PROGRAMS) 

FORCE_TARGET:

