# This Makefile.in created by simplemake.  Do not edit

# @configure_input@

# --------------------------------------------------------------------------
all: all-redirect

SHELL           = @SHELL@
AR              = @AR@
RANLIB          = @RANLIB@
master_top_srcdir  = @master_top_srcdir@
top_builddir    = @master_top_builddir@
abs_builddir    = @abs_builddir@
srcdir          = @srcdir@
abs_srcdir      = @abs_srcdir@
DEFS            = @DEFS@ -I. -I${srcdir}
CPPFLAGS        = @CPPFLAGS@
MAKE            = @MAKE@
MPILIBNAME      = @MPILIBNAME@
CC              = @CC@
CFLAGS          = @CFLAGS@ $(MPICH2_MAKE_CFLAGS)
C_COMPILE       = $(CC) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)
LIBTOOL         = @LIBTOOL@
CC_SHL          = @CC_SHL@
C_COMPILE_SHL   = $(CC_SHL) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)

VPATH = .:@srcdir@
INCLUDES = -I. -I../include -I${master_top_srcdir}/src/ch3/channels/nemesis/nemesis/include -I${master_top_srcdir}/src/include \
           -I${top_builddir}/src/include \
           -I${top_builddir}/src/util/wrappers

.SUFFIXES:
.SUFFIXES: .o .lo .c .txt 
.c.o:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -c $< ; \
	fi
	@$(C_COMPILE) -c $<
.c.lo:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE_SHL) -c $< -o _s$*.o ; \
	echo mv -f _s$*.o $*.lo ; \
	fi
	@$(C_COMPILE_SHL) -c $< -o _s$*.o
	@mv -f _s$*.o $*.lo
.c.txt:
	$(CPP) $(INCLUDES) $(CPPFLAGS) $< >$*.txt
.c:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS) ; \
	fi
	@$(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS)

# --------------------------------------------------------------------------
${srcdir}/Makefile.in: ${srcdir}/Makefile.sm
	( cd ${srcdir} && ${master_top_srcdir}/maint/simplemake \
	-rootdir=../../../../../../../ \
	-configdir=src/mpid/ch3/channels/nemesis/ \
	-common=${master_top_srcdir}/maint/makedefs \
	-docnamedefs=${master_top_srcdir}/maint/docnotes \
	"-autoconf=-I ROOTDIR/confdb" \
	-libdir='$${MPILIBNAME}=ROOTDIR/lib' \
	-smroot=${master_top_srcdir}/maint \
	-distcleanfiles="Makefile" \
	-smvar_doc_attop=0 \
		Makefile.sm )
Makefile: ${srcdir}/Makefile.in
	-cd ../../ && \
	if [ -x config.status ] ; then CONFIG_FILES=nemesis/src/Makefile CONFIG_HEADERS= ${SHELL} ./config.status ; fi
# --------------------------------------------------------------------------
apply: 
	$(ACTION) $(ACTION_INPUT)
clean: 
	-@rm -f *.o ${srcdir}/*.o 
	-@rm -f .libstamp0 .libstamp1 
	-@rm -f *.lo ${srcdir}/*.lo
	-@rm -f ${srcdir}/*.bb ${srcdir}/*.bbg ${srcdir}/*.da
	-@rm -f ${srcdir}/*.gcda ${srcdir}/*.gcno
	-@rm -f *.gcov *.bb *.bbg *.da *.gcda *.gcno
distclean:  clean distclean-xxx remove-makefile
distclean-xxx:
	-@rm -f Makefile mpid_nem_net_array.c
	-@rm -rf autom4te*.cache
	-@rm -rf $(DEPS_DIR)
	-@rm -f TAGS
maintainer-clean: clean distclean-xxx remove-genmakefiles
remove-makefile:
	rm -f Makefile
remove-genmakefiles:
	rm -f  Makefile.in Makefile
all-redirect: .libstamp0 ../../../../../../../lib/lib${MPILIBNAME}.a
	@if [ "@ENABLE_SHLIB@" != "none" ] ; then \
	    ${MAKE} .libstamp1 || exit 1; \
	fi

.libstamp0 ../../../../../../../lib/lib${MPILIBNAME}.a: mpid_nem_alloc.o \
	mpid_nem_init.o mpid_nem_queue.o mpid_nem_barrier.o mpid_nem_mpich2.o \
	mpid_nem_ckpt.o mpid_nem_finalize.o mpid_nem_network_poll.o \
	mpid_nem_network.o mpid_nem_debug.o mpid_nem_lmt.o mpid_nem_lmt_shm.o \
	mpid_nem_net_array.o mpid_nem_lmt_dma.o mpid_nem_lmt_vmsplice.o 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR cr ../../../../../../../lib/lib${MPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} cr ../../../../../../../lib/lib${MPILIBNAME}.a $? ; \
	fi
	@${AR} cr ../../../../../../../lib/lib${MPILIBNAME}.a $?
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  RANLIB          lib${MPILIBNAME}.a" ; \
	else \
	  echo ${RANLIB} ../../../../../../../lib/lib${MPILIBNAME}.a ; \
	fi
	@${RANLIB} ../../../../../../../lib/lib${MPILIBNAME}.a
	date > .libstamp0
.libstamp1 ../../../../../../../lib/lib${MPILIBNAME}.la: mpid_nem_alloc.lo \
	mpid_nem_init.lo mpid_nem_queue.lo mpid_nem_barrier.lo \
	mpid_nem_mpich2.lo mpid_nem_ckpt.lo mpid_nem_finalize.lo \
	mpid_nem_network_poll.lo mpid_nem_network.lo mpid_nem_debug.lo \
	mpid_nem_lmt.lo mpid_nem_lmt_shm.lo mpid_nem_net_array.lo \
	mpid_nem_lmt_dma.lo mpid_nem_lmt_vmsplice.lo 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR cr ../../../../../../../lib/lib${MPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} cr ../../../../../../../lib/lib${MPILIBNAME}.la $? ; \
	fi
	@${AR} cr ../../../../../../../lib/lib${MPILIBNAME}.la $?
	date > .libstamp1
coverage: 
	-@for file in mpid_nem_alloc.c mpid_nem_init.c mpid_nem_queue.c \
	mpid_nem_barrier.c   mpid_nem_mpich2.c mpid_nem_ckpt.c   \
	mpid_nem_finalize.c mpid_nem_network_poll.c mpid_nem_network.c \
	mpid_nem_debug.c mpid_nem_lmt.c   mpid_nem_lmt_shm.c \
	mpid_nem_net_array.c mpid_nem_lmt_dma.c mpid_nem_lmt_vmsplice.c ; do \
		gcov -b -f $$file ; done
# --------------------------------------------------------------------------
htmldoc:
mandoc:
latexdoc:
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# Dependencies
DEPS_DIR = .deps
MAKE_DEPEND_C   = @MAKE_DEPEND_C@ $(DEFS) $(INCLUDES) $(CPPFLAGS)

dependencies: $(DEPS_DIR)/timestamp
$(DEPS_DIR)/mpid_nem_alloc.d: $(srcdir)/mpid_nem_alloc.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_alloc.c > $(DEPS_DIR)/mpid_nem_alloc.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_alloc.c >$(DEPS_DIR)/mpid_nem_alloc.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_alloc.c >$(DEPS_DIR)/mpid_nem_alloc.d
$(DEPS_DIR)/mpid_nem_init.d: $(srcdir)/mpid_nem_init.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_init.c > $(DEPS_DIR)/mpid_nem_init.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_init.c >$(DEPS_DIR)/mpid_nem_init.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_init.c >$(DEPS_DIR)/mpid_nem_init.d
$(DEPS_DIR)/mpid_nem_queue.d: $(srcdir)/mpid_nem_queue.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_queue.c > $(DEPS_DIR)/mpid_nem_queue.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_queue.c >$(DEPS_DIR)/mpid_nem_queue.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_queue.c >$(DEPS_DIR)/mpid_nem_queue.d
$(DEPS_DIR)/mpid_nem_barrier.d: $(srcdir)/mpid_nem_barrier.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_barrier.c > $(DEPS_DIR)/mpid_nem_barrier.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_barrier.c >$(DEPS_DIR)/mpid_nem_barrier.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_barrier.c >$(DEPS_DIR)/mpid_nem_barrier.d
$(DEPS_DIR)/mpid_nem_mpich2.d: $(srcdir)/mpid_nem_mpich2.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_mpich2.c > $(DEPS_DIR)/mpid_nem_mpich2.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_mpich2.c >$(DEPS_DIR)/mpid_nem_mpich2.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_mpich2.c >$(DEPS_DIR)/mpid_nem_mpich2.d
$(DEPS_DIR)/mpid_nem_ckpt.d: $(srcdir)/mpid_nem_ckpt.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_ckpt.c > $(DEPS_DIR)/mpid_nem_ckpt.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_ckpt.c >$(DEPS_DIR)/mpid_nem_ckpt.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_ckpt.c >$(DEPS_DIR)/mpid_nem_ckpt.d
$(DEPS_DIR)/mpid_nem_finalize.d: $(srcdir)/mpid_nem_finalize.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_finalize.c > $(DEPS_DIR)/mpid_nem_finalize.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_finalize.c >$(DEPS_DIR)/mpid_nem_finalize.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_finalize.c >$(DEPS_DIR)/mpid_nem_finalize.d
$(DEPS_DIR)/mpid_nem_network_poll.d: $(srcdir)/mpid_nem_network_poll.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_network_poll.c > $(DEPS_DIR)/mpid_nem_network_poll.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_network_poll.c >$(DEPS_DIR)/mpid_nem_network_poll.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_network_poll.c >$(DEPS_DIR)/mpid_nem_network_poll.d
$(DEPS_DIR)/mpid_nem_network.d: $(srcdir)/mpid_nem_network.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_network.c > $(DEPS_DIR)/mpid_nem_network.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_network.c >$(DEPS_DIR)/mpid_nem_network.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_network.c >$(DEPS_DIR)/mpid_nem_network.d
$(DEPS_DIR)/mpid_nem_debug.d: $(srcdir)/mpid_nem_debug.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_debug.c > $(DEPS_DIR)/mpid_nem_debug.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_debug.c >$(DEPS_DIR)/mpid_nem_debug.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_debug.c >$(DEPS_DIR)/mpid_nem_debug.d
$(DEPS_DIR)/mpid_nem_lmt.d: $(srcdir)/mpid_nem_lmt.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_lmt.c > $(DEPS_DIR)/mpid_nem_lmt.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt.c >$(DEPS_DIR)/mpid_nem_lmt.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt.c >$(DEPS_DIR)/mpid_nem_lmt.d
$(DEPS_DIR)/mpid_nem_lmt_shm.d: $(srcdir)/mpid_nem_lmt_shm.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_lmt_shm.c > $(DEPS_DIR)/mpid_nem_lmt_shm.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_shm.c >$(DEPS_DIR)/mpid_nem_lmt_shm.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_shm.c >$(DEPS_DIR)/mpid_nem_lmt_shm.d
$(DEPS_DIR)/mpid_nem_net_array.d: mpid_nem_net_array.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_net_array.c > $(DEPS_DIR)/mpid_nem_net_array.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  mpid_nem_net_array.c >$(DEPS_DIR)/mpid_nem_net_array.d ; \
	fi
	@$(MAKE_DEPEND_C)  mpid_nem_net_array.c >$(DEPS_DIR)/mpid_nem_net_array.d
$(DEPS_DIR)/mpid_nem_lmt_dma.d: $(srcdir)/mpid_nem_lmt_dma.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_lmt_dma.c > $(DEPS_DIR)/mpid_nem_lmt_dma.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_dma.c >$(DEPS_DIR)/mpid_nem_lmt_dma.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_dma.c >$(DEPS_DIR)/mpid_nem_lmt_dma.d
$(DEPS_DIR)/mpid_nem_lmt_vmsplice.d: $(srcdir)/mpid_nem_lmt_vmsplice.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_lmt_vmsplice.c > $(DEPS_DIR)/mpid_nem_lmt_vmsplice.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_vmsplice.c >$(DEPS_DIR)/mpid_nem_lmt_vmsplice.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_vmsplice.c >$(DEPS_DIR)/mpid_nem_lmt_vmsplice.d
$(DEPS_DIR)/timestamp: mpid_nem_alloc.c mpid_nem_init.c mpid_nem_queue.c mpid_nem_barrier.c   \
	mpid_nem_mpich2.c mpid_nem_ckpt.c   mpid_nem_finalize.c \
	mpid_nem_network_poll.c mpid_nem_network.c mpid_nem_debug.c \
	mpid_nem_lmt.c   mpid_nem_lmt_shm.c mpid_nem_net_array.c \
	mpid_nem_lmt_dma.c mpid_nem_lmt_vmsplice.c Makefile
	rm -f $(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_alloc.c > $(DEPS_DIR)/mpid_nem_alloc.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_alloc.c >$(DEPS_DIR)/mpid_nem_alloc.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_alloc.c >$(DEPS_DIR)/mpid_nem_alloc.d
	echo "include $(DEPS_DIR)/mpid_nem_alloc.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_init.c > $(DEPS_DIR)/mpid_nem_init.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_init.c >$(DEPS_DIR)/mpid_nem_init.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_init.c >$(DEPS_DIR)/mpid_nem_init.d
	echo "include $(DEPS_DIR)/mpid_nem_init.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_queue.c > $(DEPS_DIR)/mpid_nem_queue.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_queue.c >$(DEPS_DIR)/mpid_nem_queue.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_queue.c >$(DEPS_DIR)/mpid_nem_queue.d
	echo "include $(DEPS_DIR)/mpid_nem_queue.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_barrier.c > $(DEPS_DIR)/mpid_nem_barrier.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_barrier.c >$(DEPS_DIR)/mpid_nem_barrier.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_barrier.c >$(DEPS_DIR)/mpid_nem_barrier.d
	echo "include $(DEPS_DIR)/mpid_nem_barrier.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_mpich2.c > $(DEPS_DIR)/mpid_nem_mpich2.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_mpich2.c >$(DEPS_DIR)/mpid_nem_mpich2.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_mpich2.c >$(DEPS_DIR)/mpid_nem_mpich2.d
	echo "include $(DEPS_DIR)/mpid_nem_mpich2.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_ckpt.c > $(DEPS_DIR)/mpid_nem_ckpt.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_ckpt.c >$(DEPS_DIR)/mpid_nem_ckpt.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_ckpt.c >$(DEPS_DIR)/mpid_nem_ckpt.d
	echo "include $(DEPS_DIR)/mpid_nem_ckpt.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_finalize.c > $(DEPS_DIR)/mpid_nem_finalize.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_finalize.c >$(DEPS_DIR)/mpid_nem_finalize.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_finalize.c >$(DEPS_DIR)/mpid_nem_finalize.d
	echo "include $(DEPS_DIR)/mpid_nem_finalize.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_network_poll.c > $(DEPS_DIR)/mpid_nem_network_poll.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_network_poll.c >$(DEPS_DIR)/mpid_nem_network_poll.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_network_poll.c >$(DEPS_DIR)/mpid_nem_network_poll.d
	echo "include $(DEPS_DIR)/mpid_nem_network_poll.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_network.c > $(DEPS_DIR)/mpid_nem_network.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_network.c >$(DEPS_DIR)/mpid_nem_network.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_network.c >$(DEPS_DIR)/mpid_nem_network.d
	echo "include $(DEPS_DIR)/mpid_nem_network.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_debug.c > $(DEPS_DIR)/mpid_nem_debug.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_debug.c >$(DEPS_DIR)/mpid_nem_debug.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_debug.c >$(DEPS_DIR)/mpid_nem_debug.d
	echo "include $(DEPS_DIR)/mpid_nem_debug.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_lmt.c > $(DEPS_DIR)/mpid_nem_lmt.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt.c >$(DEPS_DIR)/mpid_nem_lmt.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt.c >$(DEPS_DIR)/mpid_nem_lmt.d
	echo "include $(DEPS_DIR)/mpid_nem_lmt.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_lmt_shm.c > $(DEPS_DIR)/mpid_nem_lmt_shm.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_shm.c >$(DEPS_DIR)/mpid_nem_lmt_shm.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_shm.c >$(DEPS_DIR)/mpid_nem_lmt_shm.d
	echo "include $(DEPS_DIR)/mpid_nem_lmt_shm.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_net_array.c > $(DEPS_DIR)/mpid_nem_net_array.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  mpid_nem_net_array.c >$(DEPS_DIR)/mpid_nem_net_array.d ; \
	fi
	@$(MAKE_DEPEND_C)  mpid_nem_net_array.c >$(DEPS_DIR)/mpid_nem_net_array.d
	echo "include $(DEPS_DIR)/mpid_nem_net_array.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_lmt_dma.c > $(DEPS_DIR)/mpid_nem_lmt_dma.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_dma.c >$(DEPS_DIR)/mpid_nem_lmt_dma.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_dma.c >$(DEPS_DIR)/mpid_nem_lmt_dma.d
	echo "include $(DEPS_DIR)/mpid_nem_lmt_dma.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpid_nem_lmt_vmsplice.c > $(DEPS_DIR)/mpid_nem_lmt_vmsplice.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_vmsplice.c >$(DEPS_DIR)/mpid_nem_lmt_vmsplice.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpid_nem_lmt_vmsplice.c >$(DEPS_DIR)/mpid_nem_lmt_vmsplice.d
	echo "include $(DEPS_DIR)/mpid_nem_lmt_vmsplice.d" >>$(DEPS_DIR)/newalldeps
	if [ -s $(DEPS_DIR)/newalldeps ] ; then mv -f $(DEPS_DIR)/newalldeps $(DEPS_DIR)/alldeps ; fi
	date >$(DEPS_DIR)/timestamp
include $(DEPS_DIR)/alldeps
# End of Dependencies
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
SOURCES         =  mpid_nem_alloc.c mpid_nem_init.c mpid_nem_queue.c \
	mpid_nem_barrier.c mpid_nem_mpich2.c mpid_nem_ckpt.c \
	mpid_nem_finalize.c mpid_nem_network_poll.c mpid_nem_network.c \
	mpid_nem_debug.c mpid_nem_lmt.c mpid_nem_lmt_shm.c \
	mpid_nem_net_array.c mpid_nem_lmt_dma.c mpid_nem_lmt_vmsplice.c 
HEADERFILES     = $(HEADERS)
SOURCEFILES     = mpid_nem_alloc.c mpid_nem_init.c mpid_nem_queue.c \
	mpid_nem_barrier.c mpid_nem_mpich2.c mpid_nem_ckpt.c \
	mpid_nem_finalize.c mpid_nem_network_poll.c mpid_nem_network.c \
	mpid_nem_debug.c mpid_nem_lmt.c mpid_nem_lmt_shm.c \
	$(abs_builddir)/mpid_nem_net_array.c mpid_nem_lmt_dma.c \
	mpid_nem_lmt_vmsplice.c 
# --------------------------------------------------------------------------



FORCE_TARGET:

