# This Makefile.in created by simplemake.  Do not edit

# @configure_input@

# --------------------------------------------------------------------------
all: all-redirect

SHELL           = @SHELL@
AR              = @AR@
RANLIB          = @RANLIB@
master_top_srcdir  = @master_top_srcdir@
top_builddir    = @master_top_builddir@
abs_builddir    = @abs_builddir@
srcdir          = @srcdir@
abs_srcdir      = @abs_srcdir@
top_srcdir      = @top_srcdir@
DEFS            = @DEFS@ -I. -I${srcdir}
CPPFLAGS        = @CPPFLAGS@
MAKE            = @MAKE@
MPILIBNAME      = @MPILIBNAME@
PMPILIBNAME     = @PMPILIBNAME@

CC              = @CC@
C_COMPILE       = $(CC) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)
LIBTOOL         = @LIBTOOL@
CC_SHL          = @CC_SHL@
C_COMPILE_SHL   = $(CC_SHL) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)

VPATH = .:@srcdir@
DOCTEXT         = @DOCTEXT@
CFLAGS=@CFLAGS@ -D_GNU_SOURCE
mpi_sources = comm_compare.c comm_create.c comm_dup.c comm_free.c \
 comm_get_name.c comm_group.c \
 comm_rank.c comm_size.c comm_remote_group.c comm_remote_size.c \
 comm_set_name.c comm_split.c comm_test_inter.c \
 intercomm_create.c intercomm_merge.c create_2level_comm.c
HEADERS = mpicomm.h
INCLUDES = -I../../include -I${top_srcdir}/src/include -I${top_srcdir}/src/mpid/ch3/channels/mrail/src/rdma

.SUFFIXES:
.SUFFIXES: .o .lo .c .man .html .latex .txt 
.c.o:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -c $< ; \
	fi
	@$(C_COMPILE) -c $<
.c.lo:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE_SHL) -c $< -o _s$*.o ; \
	echo mv -f _s$*.o $*.lo ; \
	fi
	@$(C_COMPILE_SHL) -c $< -o _s$*.o
	@mv -f _s$*.o $*.lo
.c.txt:
	$(CPP) $(INCLUDES) $(CPPFLAGS) $< >$*.txt
.c:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS) ; \
	fi
	@$(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS)
.c.man:
	$(DOCTEXT) -man -mpath ../../../man/man3 -ext 3 -heading MPI \
		-quotefmt ${master_top_srcdir}/maint/docnotes $<
.c.html:
	$(DOCTEXT) -html -mpath ../../../www/www3  -heading MPI \
		-quotefmt ${master_top_srcdir}/maint/docnotes $<
.c.latex:
	$(DOCTEXT) -latex -mpath ../../../doc/refman  -heading MPI \
		-quotefmt ${master_top_srcdir}/maint/docnotes $<

# --------------------------------------------------------------------------
${srcdir}/Makefile.in: ${srcdir}/Makefile.sm
	( cd ${srcdir} && ${master_top_srcdir}/maint/simplemake \
	-rootdir=../../../ \
	-configdir=. \
	-common=${master_top_srcdir}/maint/makedefs \
	-docnamedefs=${master_top_srcdir}/maint/docnotes \
	"-autoconf=-I ROOTDIR/confdb" \
	-libdir='$${MPILIBNAME}=ROOTDIR/lib' \
	-smroot=${master_top_srcdir}/maint \
	-distcleanfiles="Makefile" \
	-smvar_doc_attop=0 \
		Makefile.sm )
Makefile: ${srcdir}/Makefile.in
	-cd ../../../ && \
	if [ -x config.status ] ; then CONFIG_FILES=src/mpi/comm/Makefile CONFIG_HEADERS= ${SHELL} ./config.status ; fi
# --------------------------------------------------------------------------
apply: 
	$(ACTION) $(ACTION_INPUT)
clean: 
	-@rm -f *.o ${srcdir}/*.o 
	-@rm -f .libstamp0 .libstamp1 .libstamp2 .libstamp3 
	-@rm -f *.lo ${srcdir}/*.lo
	-@rm -f ${srcdir}/*.bb ${srcdir}/*.bbg ${srcdir}/*.da
	-@rm -f ${srcdir}/*.gcda ${srcdir}/*.gcno
	-@rm -f *.gcov *.bb *.bbg *.da *.gcda *.gcno
distclean:  clean distclean-xxx remove-makefile
distclean-xxx:
	-@rm -f Makefile
	-@rm -rf autom4te*.cache
	-@rm -rf $(DEPS_DIR)
	-@rm -f TAGS
maintainer-clean: clean distclean-xxx remove-genmakefiles
remove-makefile:
	rm -f Makefile
remove-genmakefiles:
	rm -f  Makefile.in Makefile
all-redirect: .libstamp0 ../../../lib/lib${MPILIBNAME}.a
	@if [ -n "@NO_WEAK_SYM@" ] ; then \
	    ${MAKE} .libstamp2 || exit 1; \
	fi
	@if [ "@ENABLE_SHLIB@" != "none" ] ; then \
	    ${MAKE} .libstamp1 || exit 1; \
	    if [ -n "@NO_WEAK_SYM@" ] ; then \
	        ${MAKE} .libstamp3 || exit 1; \
	    fi ; \
	fi

.libstamp0 ../../../lib/lib${MPILIBNAME}.a: comm_compare.o comm_create.o \
	comm_dup.o comm_free.o comm_get_name.o comm_group.o comm_rank.o \
	comm_size.o comm_remote_group.o comm_remote_size.o comm_set_name.o \
	comm_split.o comm_test_inter.o intercomm_create.o intercomm_merge.o \
	create_2level_comm.o commutil.o 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${MPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${MPILIBNAME}.a $? ; \
	fi
	@${AR} cr ../../../lib/lib${MPILIBNAME}.a $?
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  RANLIB          lib${MPILIBNAME}.a" ; \
	else \
	  echo ${RANLIB} ../../../lib/lib${MPILIBNAME}.a ; \
	fi
	@${RANLIB} ../../../lib/lib${MPILIBNAME}.a
	date > .libstamp0
.libstamp1 ../../../lib/lib${MPILIBNAME}.la: comm_compare.lo comm_create.lo \
	comm_dup.lo comm_free.lo comm_get_name.lo comm_group.lo comm_rank.lo \
	comm_size.lo comm_remote_group.lo comm_remote_size.lo \
	comm_set_name.lo comm_split.lo comm_test_inter.lo intercomm_create.lo \
	intercomm_merge.lo create_2level_comm.lo commutil.lo 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${MPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${MPILIBNAME}.la $? ; \
	fi
	@${AR} cr ../../../lib/lib${MPILIBNAME}.la $?
	date > .libstamp1

# --------------------------------------------------------------------------
.libstamp2: _comm_compare.o _comm_create.o _comm_dup.o _comm_free.o _comm_get_name.o \
	_comm_group.o _comm_rank.o _comm_size.o _comm_remote_group.o \
	_comm_remote_size.o _comm_set_name.o _comm_split.o _comm_test_inter.o \
	_intercomm_create.o _intercomm_merge.o _create_2level_comm.o 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${PMPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${PMPILIBNAME}.a $? ; \
	fi
	@${AR} cr ../../../lib/lib${PMPILIBNAME}.a $?
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  RANLIB          lib${PMPILIBNAME}.a" ; \
	else \
	  echo ${RANLIB} ../../../lib/lib${PMPILIBNAME}.a ; \
	fi
	@${RANLIB} ../../../lib/lib${PMPILIBNAME}.a
	date > .libstamp2
.libstamp3: _comm_compare.lo _comm_create.lo _comm_dup.lo _comm_free.lo _comm_get_name.lo \
	_comm_group.lo _comm_rank.lo _comm_size.lo _comm_remote_group.lo \
	_comm_remote_size.lo _comm_set_name.lo _comm_split.lo \
	_comm_test_inter.lo _intercomm_create.lo _intercomm_merge.lo \
	_create_2level_comm.lo 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR cr ../../../lib/lib${PMPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} cr ../../../lib/lib${PMPILIBNAME}.la $? ; \
	fi
	@${AR} cr ../../../lib/lib${PMPILIBNAME}.la $?
	date > .libstamp3
_comm_compare.o: comm_compare.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_compare.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_compare.c -o _comm_compare.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_compare.c -o _comm_compare.o
_comm_compare.lo: comm_compare.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_compare.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_compare.c -o _comm_compare.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_compare.c -o _comm_compare.lo
_comm_create.o: comm_create.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_create.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_create.c -o _comm_create.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_create.c -o _comm_create.o
_comm_create.lo: comm_create.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_create.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_create.c -o _comm_create.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_create.c -o _comm_create.lo
_comm_dup.o: comm_dup.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_dup.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_dup.c -o _comm_dup.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_dup.c -o _comm_dup.o
_comm_dup.lo: comm_dup.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_dup.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_dup.c -o _comm_dup.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_dup.c -o _comm_dup.lo
_comm_free.o: comm_free.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_free.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_free.c -o _comm_free.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_free.c -o _comm_free.o
_comm_free.lo: comm_free.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_free.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_free.c -o _comm_free.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_free.c -o _comm_free.lo
_comm_get_name.o: comm_get_name.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_get_name.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_get_name.c -o _comm_get_name.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_get_name.c -o _comm_get_name.o
_comm_get_name.lo: comm_get_name.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_get_name.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_get_name.c -o _comm_get_name.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_get_name.c -o _comm_get_name.lo
_comm_group.o: comm_group.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_group.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_group.c -o _comm_group.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_group.c -o _comm_group.o
_comm_group.lo: comm_group.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_group.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_group.c -o _comm_group.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_group.c -o _comm_group.lo
_comm_rank.o: comm_rank.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_rank.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_rank.c -o _comm_rank.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_rank.c -o _comm_rank.o
_comm_rank.lo: comm_rank.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_rank.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_rank.c -o _comm_rank.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_rank.c -o _comm_rank.lo
_comm_size.o: comm_size.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_size.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_size.c -o _comm_size.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_size.c -o _comm_size.o
_comm_size.lo: comm_size.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_size.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_size.c -o _comm_size.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_size.c -o _comm_size.lo
_comm_remote_group.o: comm_remote_group.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_remote_group.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_remote_group.c -o _comm_remote_group.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_remote_group.c -o _comm_remote_group.o
_comm_remote_group.lo: comm_remote_group.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_remote_group.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_remote_group.c -o _comm_remote_group.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_remote_group.c -o _comm_remote_group.lo
_comm_remote_size.o: comm_remote_size.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_remote_size.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_remote_size.c -o _comm_remote_size.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_remote_size.c -o _comm_remote_size.o
_comm_remote_size.lo: comm_remote_size.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_remote_size.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_remote_size.c -o _comm_remote_size.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_remote_size.c -o _comm_remote_size.lo
_comm_set_name.o: comm_set_name.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_set_name.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_set_name.c -o _comm_set_name.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_set_name.c -o _comm_set_name.o
_comm_set_name.lo: comm_set_name.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_set_name.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_set_name.c -o _comm_set_name.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_set_name.c -o _comm_set_name.lo
_comm_split.o: comm_split.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_split.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_split.c -o _comm_split.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_split.c -o _comm_split.o
_comm_split.lo: comm_split.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_split.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_split.c -o _comm_split.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_split.c -o _comm_split.lo
_comm_test_inter.o: comm_test_inter.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/comm_test_inter.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_test_inter.c -o _comm_test_inter.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_test_inter.c -o _comm_test_inter.o
_comm_test_inter.lo: comm_test_inter.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/comm_test_inter.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_test_inter.c -o _comm_test_inter.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/comm_test_inter.c -o _comm_test_inter.lo
_intercomm_create.o: intercomm_create.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/intercomm_create.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/intercomm_create.c -o _intercomm_create.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/intercomm_create.c -o _intercomm_create.o
_intercomm_create.lo: intercomm_create.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/intercomm_create.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/intercomm_create.c -o _intercomm_create.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/intercomm_create.c -o _intercomm_create.lo
_intercomm_merge.o: intercomm_merge.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/intercomm_merge.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/intercomm_merge.c -o _intercomm_merge.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/intercomm_merge.c -o _intercomm_merge.o
_intercomm_merge.lo: intercomm_merge.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/intercomm_merge.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/intercomm_merge.c -o _intercomm_merge.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/intercomm_merge.c -o _intercomm_merge.lo
_create_2level_comm.o: create_2level_comm.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC             -D<profiling> ${srcdir}/create_2level_comm.c" ; \
	else \
	  echo $(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/create_2level_comm.c -o _create_2level_comm.o ; \
	fi
	@$(C_COMPILE) -c @PROFILE_DEF_MPI@ $(srcdir)/create_2level_comm.c -o _create_2level_comm.o
_create_2level_comm.lo: create_2level_comm.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo " CC           -D<profiling> $(srcdir)/create_2level_comm.c" ; \
	else \
	  echo $(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/create_2level_comm.c -o _create_2level_comm.lo ; \
	fi
	@$(C_COMPILE_SHL) -c @PROFILE_DEF_MPI@ $(srcdir)/create_2level_comm.c -o _create_2level_comm.lo
# --------------------------------------------------------------------------
coverage: 
	-@for file in $(mpi_sources) commutil.c ; do \
		gcov -b -f $$file ; done
# --------------------------------------------------------------------------
mandoc: ${mpi_sources:.c=.man}
htmldoc: ${mpi_sources:.c=.html}
latexdoc: ${mpi_sources:.c=.latex}
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# Dependencies
DEPS_DIR = .deps
MAKE_DEPEND_C   = @MAKE_DEPEND_C@ $(DEFS) $(INCLUDES) $(CPPFLAGS)

dependencies: $(DEPS_DIR)/timestamp
$(DEPS_DIR)/comm_compare.d: $(srcdir)/comm_compare.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_compare.c > $(DEPS_DIR)/comm_compare.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_compare.o comm_compare.o comm_compare.lo _comm_compare.lo' $(srcdir)/comm_compare.c >$(DEPS_DIR)/comm_compare.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_compare.o comm_compare.o comm_compare.lo _comm_compare.lo' $(srcdir)/comm_compare.c >$(DEPS_DIR)/comm_compare.d
$(DEPS_DIR)/comm_create.d: $(srcdir)/comm_create.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_create.c > $(DEPS_DIR)/comm_create.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_create.o comm_create.o comm_create.lo _comm_create.lo' $(srcdir)/comm_create.c >$(DEPS_DIR)/comm_create.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_create.o comm_create.o comm_create.lo _comm_create.lo' $(srcdir)/comm_create.c >$(DEPS_DIR)/comm_create.d
$(DEPS_DIR)/comm_dup.d: $(srcdir)/comm_dup.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_dup.c > $(DEPS_DIR)/comm_dup.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_dup.o comm_dup.o comm_dup.lo _comm_dup.lo' $(srcdir)/comm_dup.c >$(DEPS_DIR)/comm_dup.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_dup.o comm_dup.o comm_dup.lo _comm_dup.lo' $(srcdir)/comm_dup.c >$(DEPS_DIR)/comm_dup.d
$(DEPS_DIR)/comm_free.d: $(srcdir)/comm_free.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_free.c > $(DEPS_DIR)/comm_free.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_free.o comm_free.o comm_free.lo _comm_free.lo' $(srcdir)/comm_free.c >$(DEPS_DIR)/comm_free.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_free.o comm_free.o comm_free.lo _comm_free.lo' $(srcdir)/comm_free.c >$(DEPS_DIR)/comm_free.d
$(DEPS_DIR)/comm_get_name.d: $(srcdir)/comm_get_name.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_get_name.c > $(DEPS_DIR)/comm_get_name.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_get_name.o comm_get_name.o comm_get_name.lo _comm_get_name.lo' $(srcdir)/comm_get_name.c >$(DEPS_DIR)/comm_get_name.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_get_name.o comm_get_name.o comm_get_name.lo _comm_get_name.lo' $(srcdir)/comm_get_name.c >$(DEPS_DIR)/comm_get_name.d
$(DEPS_DIR)/comm_group.d: $(srcdir)/comm_group.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_group.c > $(DEPS_DIR)/comm_group.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_group.o comm_group.o comm_group.lo _comm_group.lo' $(srcdir)/comm_group.c >$(DEPS_DIR)/comm_group.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_group.o comm_group.o comm_group.lo _comm_group.lo' $(srcdir)/comm_group.c >$(DEPS_DIR)/comm_group.d
$(DEPS_DIR)/comm_rank.d: $(srcdir)/comm_rank.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_rank.c > $(DEPS_DIR)/comm_rank.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_rank.o comm_rank.o comm_rank.lo _comm_rank.lo' $(srcdir)/comm_rank.c >$(DEPS_DIR)/comm_rank.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_rank.o comm_rank.o comm_rank.lo _comm_rank.lo' $(srcdir)/comm_rank.c >$(DEPS_DIR)/comm_rank.d
$(DEPS_DIR)/comm_size.d: $(srcdir)/comm_size.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_size.c > $(DEPS_DIR)/comm_size.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_size.o comm_size.o comm_size.lo _comm_size.lo' $(srcdir)/comm_size.c >$(DEPS_DIR)/comm_size.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_size.o comm_size.o comm_size.lo _comm_size.lo' $(srcdir)/comm_size.c >$(DEPS_DIR)/comm_size.d
$(DEPS_DIR)/comm_remote_group.d: $(srcdir)/comm_remote_group.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_remote_group.c > $(DEPS_DIR)/comm_remote_group.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_remote_group.o comm_remote_group.o comm_remote_group.lo _comm_remote_group.lo' $(srcdir)/comm_remote_group.c >$(DEPS_DIR)/comm_remote_group.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_remote_group.o comm_remote_group.o comm_remote_group.lo _comm_remote_group.lo' $(srcdir)/comm_remote_group.c >$(DEPS_DIR)/comm_remote_group.d
$(DEPS_DIR)/comm_remote_size.d: $(srcdir)/comm_remote_size.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_remote_size.c > $(DEPS_DIR)/comm_remote_size.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_remote_size.o comm_remote_size.o comm_remote_size.lo _comm_remote_size.lo' $(srcdir)/comm_remote_size.c >$(DEPS_DIR)/comm_remote_size.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_remote_size.o comm_remote_size.o comm_remote_size.lo _comm_remote_size.lo' $(srcdir)/comm_remote_size.c >$(DEPS_DIR)/comm_remote_size.d
$(DEPS_DIR)/comm_set_name.d: $(srcdir)/comm_set_name.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_set_name.c > $(DEPS_DIR)/comm_set_name.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_set_name.o comm_set_name.o comm_set_name.lo _comm_set_name.lo' $(srcdir)/comm_set_name.c >$(DEPS_DIR)/comm_set_name.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_set_name.o comm_set_name.o comm_set_name.lo _comm_set_name.lo' $(srcdir)/comm_set_name.c >$(DEPS_DIR)/comm_set_name.d
$(DEPS_DIR)/comm_split.d: $(srcdir)/comm_split.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_split.c > $(DEPS_DIR)/comm_split.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_split.o comm_split.o comm_split.lo _comm_split.lo' $(srcdir)/comm_split.c >$(DEPS_DIR)/comm_split.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_split.o comm_split.o comm_split.lo _comm_split.lo' $(srcdir)/comm_split.c >$(DEPS_DIR)/comm_split.d
$(DEPS_DIR)/comm_test_inter.d: $(srcdir)/comm_test_inter.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_test_inter.c > $(DEPS_DIR)/comm_test_inter.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_test_inter.o comm_test_inter.o comm_test_inter.lo _comm_test_inter.lo' $(srcdir)/comm_test_inter.c >$(DEPS_DIR)/comm_test_inter.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_test_inter.o comm_test_inter.o comm_test_inter.lo _comm_test_inter.lo' $(srcdir)/comm_test_inter.c >$(DEPS_DIR)/comm_test_inter.d
$(DEPS_DIR)/intercomm_create.d: $(srcdir)/intercomm_create.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C intercomm_create.c > $(DEPS_DIR)/intercomm_create.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_intercomm_create.o intercomm_create.o intercomm_create.lo _intercomm_create.lo' $(srcdir)/intercomm_create.c >$(DEPS_DIR)/intercomm_create.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_intercomm_create.o intercomm_create.o intercomm_create.lo _intercomm_create.lo' $(srcdir)/intercomm_create.c >$(DEPS_DIR)/intercomm_create.d
$(DEPS_DIR)/intercomm_merge.d: $(srcdir)/intercomm_merge.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C intercomm_merge.c > $(DEPS_DIR)/intercomm_merge.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_intercomm_merge.o intercomm_merge.o intercomm_merge.lo _intercomm_merge.lo' $(srcdir)/intercomm_merge.c >$(DEPS_DIR)/intercomm_merge.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_intercomm_merge.o intercomm_merge.o intercomm_merge.lo _intercomm_merge.lo' $(srcdir)/intercomm_merge.c >$(DEPS_DIR)/intercomm_merge.d
$(DEPS_DIR)/create_2level_comm.d: $(srcdir)/create_2level_comm.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C create_2level_comm.c > $(DEPS_DIR)/create_2level_comm.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_create_2level_comm.o create_2level_comm.o create_2level_comm.lo _create_2level_comm.lo' $(srcdir)/create_2level_comm.c >$(DEPS_DIR)/create_2level_comm.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_create_2level_comm.o create_2level_comm.o create_2level_comm.lo _create_2level_comm.lo' $(srcdir)/create_2level_comm.c >$(DEPS_DIR)/create_2level_comm.d
$(DEPS_DIR)/commutil.d: $(srcdir)/commutil.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C commutil.c > $(DEPS_DIR)/commutil.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_commutil.o commutil.o commutil.lo _commutil.lo' $(srcdir)/commutil.c >$(DEPS_DIR)/commutil.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_commutil.o commutil.o commutil.lo _commutil.lo' $(srcdir)/commutil.c >$(DEPS_DIR)/commutil.d
$(DEPS_DIR)/timestamp: $(mpi_sources) commutil.c Makefile
	rm -f $(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_compare.c > $(DEPS_DIR)/comm_compare.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_compare.o comm_compare.o comm_compare.lo _comm_compare.lo' $(srcdir)/comm_compare.c >$(DEPS_DIR)/comm_compare.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_compare.o comm_compare.o comm_compare.lo _comm_compare.lo' $(srcdir)/comm_compare.c >$(DEPS_DIR)/comm_compare.d
	echo "include $(DEPS_DIR)/comm_compare.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_create.c > $(DEPS_DIR)/comm_create.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_create.o comm_create.o comm_create.lo _comm_create.lo' $(srcdir)/comm_create.c >$(DEPS_DIR)/comm_create.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_create.o comm_create.o comm_create.lo _comm_create.lo' $(srcdir)/comm_create.c >$(DEPS_DIR)/comm_create.d
	echo "include $(DEPS_DIR)/comm_create.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_dup.c > $(DEPS_DIR)/comm_dup.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_dup.o comm_dup.o comm_dup.lo _comm_dup.lo' $(srcdir)/comm_dup.c >$(DEPS_DIR)/comm_dup.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_dup.o comm_dup.o comm_dup.lo _comm_dup.lo' $(srcdir)/comm_dup.c >$(DEPS_DIR)/comm_dup.d
	echo "include $(DEPS_DIR)/comm_dup.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_free.c > $(DEPS_DIR)/comm_free.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_free.o comm_free.o comm_free.lo _comm_free.lo' $(srcdir)/comm_free.c >$(DEPS_DIR)/comm_free.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_free.o comm_free.o comm_free.lo _comm_free.lo' $(srcdir)/comm_free.c >$(DEPS_DIR)/comm_free.d
	echo "include $(DEPS_DIR)/comm_free.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_get_name.c > $(DEPS_DIR)/comm_get_name.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_get_name.o comm_get_name.o comm_get_name.lo _comm_get_name.lo' $(srcdir)/comm_get_name.c >$(DEPS_DIR)/comm_get_name.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_get_name.o comm_get_name.o comm_get_name.lo _comm_get_name.lo' $(srcdir)/comm_get_name.c >$(DEPS_DIR)/comm_get_name.d
	echo "include $(DEPS_DIR)/comm_get_name.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_group.c > $(DEPS_DIR)/comm_group.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_group.o comm_group.o comm_group.lo _comm_group.lo' $(srcdir)/comm_group.c >$(DEPS_DIR)/comm_group.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_group.o comm_group.o comm_group.lo _comm_group.lo' $(srcdir)/comm_group.c >$(DEPS_DIR)/comm_group.d
	echo "include $(DEPS_DIR)/comm_group.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_rank.c > $(DEPS_DIR)/comm_rank.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_rank.o comm_rank.o comm_rank.lo _comm_rank.lo' $(srcdir)/comm_rank.c >$(DEPS_DIR)/comm_rank.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_rank.o comm_rank.o comm_rank.lo _comm_rank.lo' $(srcdir)/comm_rank.c >$(DEPS_DIR)/comm_rank.d
	echo "include $(DEPS_DIR)/comm_rank.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_size.c > $(DEPS_DIR)/comm_size.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_size.o comm_size.o comm_size.lo _comm_size.lo' $(srcdir)/comm_size.c >$(DEPS_DIR)/comm_size.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_size.o comm_size.o comm_size.lo _comm_size.lo' $(srcdir)/comm_size.c >$(DEPS_DIR)/comm_size.d
	echo "include $(DEPS_DIR)/comm_size.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_remote_group.c > $(DEPS_DIR)/comm_remote_group.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_remote_group.o comm_remote_group.o comm_remote_group.lo _comm_remote_group.lo' $(srcdir)/comm_remote_group.c >$(DEPS_DIR)/comm_remote_group.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_remote_group.o comm_remote_group.o comm_remote_group.lo _comm_remote_group.lo' $(srcdir)/comm_remote_group.c >$(DEPS_DIR)/comm_remote_group.d
	echo "include $(DEPS_DIR)/comm_remote_group.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_remote_size.c > $(DEPS_DIR)/comm_remote_size.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_remote_size.o comm_remote_size.o comm_remote_size.lo _comm_remote_size.lo' $(srcdir)/comm_remote_size.c >$(DEPS_DIR)/comm_remote_size.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_remote_size.o comm_remote_size.o comm_remote_size.lo _comm_remote_size.lo' $(srcdir)/comm_remote_size.c >$(DEPS_DIR)/comm_remote_size.d
	echo "include $(DEPS_DIR)/comm_remote_size.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_set_name.c > $(DEPS_DIR)/comm_set_name.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_set_name.o comm_set_name.o comm_set_name.lo _comm_set_name.lo' $(srcdir)/comm_set_name.c >$(DEPS_DIR)/comm_set_name.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_set_name.o comm_set_name.o comm_set_name.lo _comm_set_name.lo' $(srcdir)/comm_set_name.c >$(DEPS_DIR)/comm_set_name.d
	echo "include $(DEPS_DIR)/comm_set_name.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_split.c > $(DEPS_DIR)/comm_split.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_split.o comm_split.o comm_split.lo _comm_split.lo' $(srcdir)/comm_split.c >$(DEPS_DIR)/comm_split.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_split.o comm_split.o comm_split.lo _comm_split.lo' $(srcdir)/comm_split.c >$(DEPS_DIR)/comm_split.d
	echo "include $(DEPS_DIR)/comm_split.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C comm_test_inter.c > $(DEPS_DIR)/comm_test_inter.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_comm_test_inter.o comm_test_inter.o comm_test_inter.lo _comm_test_inter.lo' $(srcdir)/comm_test_inter.c >$(DEPS_DIR)/comm_test_inter.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_comm_test_inter.o comm_test_inter.o comm_test_inter.lo _comm_test_inter.lo' $(srcdir)/comm_test_inter.c >$(DEPS_DIR)/comm_test_inter.d
	echo "include $(DEPS_DIR)/comm_test_inter.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C intercomm_create.c > $(DEPS_DIR)/intercomm_create.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_intercomm_create.o intercomm_create.o intercomm_create.lo _intercomm_create.lo' $(srcdir)/intercomm_create.c >$(DEPS_DIR)/intercomm_create.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_intercomm_create.o intercomm_create.o intercomm_create.lo _intercomm_create.lo' $(srcdir)/intercomm_create.c >$(DEPS_DIR)/intercomm_create.d
	echo "include $(DEPS_DIR)/intercomm_create.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C intercomm_merge.c > $(DEPS_DIR)/intercomm_merge.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_intercomm_merge.o intercomm_merge.o intercomm_merge.lo _intercomm_merge.lo' $(srcdir)/intercomm_merge.c >$(DEPS_DIR)/intercomm_merge.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_intercomm_merge.o intercomm_merge.o intercomm_merge.lo _intercomm_merge.lo' $(srcdir)/intercomm_merge.c >$(DEPS_DIR)/intercomm_merge.d
	echo "include $(DEPS_DIR)/intercomm_merge.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C create_2level_comm.c > $(DEPS_DIR)/create_2level_comm.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_create_2level_comm.o create_2level_comm.o create_2level_comm.lo _create_2level_comm.lo' $(srcdir)/create_2level_comm.c >$(DEPS_DIR)/create_2level_comm.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_create_2level_comm.o create_2level_comm.o create_2level_comm.lo _create_2level_comm.lo' $(srcdir)/create_2level_comm.c >$(DEPS_DIR)/create_2level_comm.d
	echo "include $(DEPS_DIR)/create_2level_comm.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C commutil.c > $(DEPS_DIR)/commutil.d" ; \
	else \
	  echo $(MAKE_DEPEND_C) -MT '_commutil.o commutil.o commutil.lo _commutil.lo' $(srcdir)/commutil.c >$(DEPS_DIR)/commutil.d ; \
	fi
	@$(MAKE_DEPEND_C) -MT '_commutil.o commutil.o commutil.lo _commutil.lo' $(srcdir)/commutil.c >$(DEPS_DIR)/commutil.d
	echo "include $(DEPS_DIR)/commutil.d" >>$(DEPS_DIR)/newalldeps
	if [ -s $(DEPS_DIR)/newalldeps ] ; then mv -f $(DEPS_DIR)/newalldeps $(DEPS_DIR)/alldeps ; fi
	date >$(DEPS_DIR)/timestamp
include $(DEPS_DIR)/alldeps
# End of Dependencies
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
SOURCES         =  comm_compare.c comm_create.c comm_dup.c comm_free.c \
	comm_get_name.c comm_group.c comm_rank.c comm_size.c \
	comm_remote_group.c comm_remote_size.c comm_set_name.c comm_split.c \
	comm_test_inter.c intercomm_create.c intercomm_merge.c \
	create_2level_comm.c commutil.c 
HEADERFILES     = $(HEADERS)
SOURCEFILES     = $(SOURCES)
# --------------------------------------------------------------------------
# Copyright (c) 2003-2011, The Ohio State University. All rights
# reserved.
#
# This file is part of the MVAPICH2 software package developed by the
# team members of The Ohio State University's Network-Based Computing
# Laboratory (NBCL), headed by Professor Dhabaleswar K. (DK) Panda.
#
# For detailed copyright and licensing information, please refer to the
# copyright file COPYRIGHT in the top level MVAPICH2 directory.
#




FORCE_TARGET:

